package ua.com.merchik.merchik.features.maps.presentation.main


import android.annotation.SuppressLint
import androidx.compose.animation.animateContentSize
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.model.*
import com.google.gson.Gson
import com.google.maps.android.compose.rememberCameraPositionState
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import ua.com.merchik.merchik.Globals
import ua.com.merchik.merchik.R
import ua.com.merchik.merchik.data.RealmModels.WpDataDB
import ua.com.merchik.merchik.dataLayer.ContextUI
import ua.com.merchik.merchik.dialogs.features.dialogMessage.DialogStatus
import ua.com.merchik.merchik.dialogs.features.dialogMessage.MessageDialog
import ua.com.merchik.merchik.features.main.Main.MainViewModel
import ua.com.merchik.merchik.features.main.Main.SortingField
import ua.com.merchik.merchik.features.main.componentsUI.ImageButton
import ua.com.merchik.merchik.features.maps.domain.parseDoubleSafe
import ua.com.merchik.merchik.features.maps.domain.stringByKey
import ua.com.merchik.merchik.features.maps.presentation.MapActionsBridge
import ua.com.merchik.merchik.features.maps.presentation.MapEffect
import ua.com.merchik.merchik.features.maps.presentation.MapIntent
import ua.com.merchik.merchik.features.maps.presentation.viewModels.BaseMapViewModel
import ua.com.merchik.merchik.features.maps.presentation.viewModels.MapFromMapsViewModel
import ua.com.merchik.merchik.features.maps.presentation.viewModels.MapFromWPdataViewModel
import java.text.SimpleDateFormat
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.util.*


@SuppressLint("UnusedMaterialScaffoldPaddingParameter", "StateFlowValueCalledInComposition")
@Composable
fun MapsDialog(
    mainViewModel: MainViewModel,
    onDismiss: () -> Unit,
    contextUI: ContextUI,
    onOpenContextMenu: (WpDataDB, ContextUI) -> Unit
) {
    val uiState by mainViewModel.uiState.collectAsState()

    val highlightColor: Color = colorResource(id = R.color.ufmd_accept_t)

    // 1) –≥–µ–Ω–µ—Ä–∏–º id —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ composable)
    val sessionId = remember { System.currentTimeMillis() }

    var showSettingsDialog by remember { mutableStateOf(false) }
    var showToolTip by remember { mutableStateOf(false) }

    val scope = rememberCoroutineScope()  // <-- –¥–æ–±–∞–≤–∏–ª–∏

    var maxLinesSubTitle by remember { mutableStateOf(1) }

    val formatterDDmmYYYY = DateTimeFormatter
        .ofPattern("dd MMM yyyy")
        .withLocale(Locale.getDefault())

    val formatterHHdd_DDmmYYYY = DateTimeFormatter
        .ofPattern("HH:mm dd.MM.yyyy")
        .withLocale(Locale.getDefault())

// Decide scenario once per input
    val hasLogCenter by remember(uiState.items) {
        mutableStateOf(
            uiState.items.firstOrNull {
                it.rawFields.stringByKey("log_addr_location_xd")?.parseDoubleSafe() != null &&
                        it.rawFields.stringByKey("log_addr_location_yd")?.parseDoubleSafe() != null
            } != null
        )
    }


    val vm: BaseMapViewModel =
        if (hasLogCenter) hiltViewModel<MapFromMapsViewModel>() else hiltViewModel<MapFromWPdataViewModel>()

    // 1) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
    val mapState by vm.state.collectAsState()


    val allUserIs14041 by remember(mapState.pointsUi) {
        derivedStateOf {
            val pts = mapState.pointsUi
            pts.isNotEmpty() && pts.all { it.point.wp?.user_id == 14041 }
        }
    }

    LaunchedEffect(vm, onDismiss, contextUI, highlightColor, sessionId) {
        vm.attachBridge(object : MapActionsBridge {
            override val contextUI: ContextUI = contextUI
            override val highlightColor: Color = highlightColor
            override fun requestScrollToVisit(stableId: Long) =
                mainViewModel.requestScrollToVisit(stableId)

            override fun highlightByAddrId(addrId: String, color: Color) =
                mainViewModel.highlightByAddrId(addrId, color)

            override fun dismissHost() = onDismiss()
        })
        vm.process(MapIntent.Init(sessionId)) // üëà –≤–∞–∂–Ω—ã–π –≤—ã–∑–æ–≤
    }

    // –µ—Å—Ç—å –ª–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 14041 (–¥–ª—è FromWPdata)
    val isRnoUserOnMap by remember(mapState.pointsUi) {
        derivedStateOf { mapState.pointsUi.any { it.point.wp?.user_id == 14041 } }
    }

    // –ø–µ—Ä–∏–æ–¥ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    val periodStrt = remember(uiState.filters?.rangeDataByKey) {
        uiState.filters?.rangeDataByKey?.let { range ->
            range.start?.format(formatterDDmmYYYY)
        } ?: "–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"
    }

    val periodEnd = remember(uiState.filters?.rangeDataByKey) {
        uiState.filters?.rangeDataByKey?.let { range ->
            range.end?.format(formatterDDmmYYYY)
        } ?: "–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"
    }

    // –≤—Ä–µ–º—è –¥–ª—è fromMaps
    val validTime = 1_800_000L // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    val wpDataDB: WpDataDB? = try {
        Gson().fromJson(mainViewModel.dataJson, WpDataDB::class.java)
    } catch (e: Exception) {
        null
    }

// –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è
    val startTime = remember {
        val startMillis = if (wpDataDB != null && wpDataDB.visit_start_dt > 0 && wpDataDB.visit_end_dt > 0) {
            wpDataDB.visit_start_dt - validTime
        } else {
            System.currentTimeMillis() - validTime
        }

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        val millis = if (startMillis < 10_000_000_000L) startMillis * 1000 else startMillis

        Instant.ofEpochMilli(millis)
            .atZone(ZoneId.systemDefault())
            .format(formatterHHdd_DDmmYYYY)
    }

    val endTime = remember {
        val endMillis = if (wpDataDB != null && wpDataDB.visit_end_dt > 0) {
            wpDataDB.visit_end_dt
        } else {
            System.currentTimeMillis()
        }

        val millis = if (endMillis < 10_000_000_000L) endMillis * 1000 else endMillis

        Instant.ofEpochMilli(millis)
            .atZone(ZoneId.systemDefault())
            .format(formatterHHdd_DDmmYYYY)
    }


    // --- —Ç–µ–∫—Å—Ç—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ---
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ -> subTitle –¥–∏–∞–ª–æ–≥–∞ "–î–æ–≤—ñ–¥–∫–∞"
    // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ -> –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ (–≤–º–µ—Å—Ç–æ "## –û–ø–∏—Å ‚Ä¶")
    // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ -> message –≤ –¥–∏–∞–ª–æ–≥–µ "–î–æ–≤—ñ–¥–∫–∞"
    val isFromMaps = hasLogCenter
    val (infoSubtitle, mapSubheaderText, helpMessage) = remember(isFromMaps, isRnoUserOnMap, periodStrt, periodEnd) {
        when {
            // 1) FromWPdata + user 14041  ‚Äî "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫."
            !isFromMaps && isRnoUserOnMap -> Triple(
                "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫.",
                String.format(mainViewModel.getTranslateString(
                    text = "–ê–¥—Ä–µ—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É ¬´?¬ª –≤–≤–µ—Ä—Ö—É —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã.",
                    translateId = 9069
                ),startTime,endTime),

                "–ù–∞ –∫–∞—Ä—Ç–µ, –∑–µ–ª–µ–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ –ø–æ–º–µ—á–µ–Ω—ã –∞–¥—Ä–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç—ã –∑–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é) –æ–ø–ª–∞—Ç—É. " +
                        "–ß–∏—Å–ª–∞ –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É. " +
                        "–°–∏–Ω–∏–º –æ—Ç–º–µ—á–µ–Ω–æ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ú–ü). " +
                        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—ã (–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ) –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥—Ä–µ—Å—É, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–∞—Ä–∫–µ—Ä–µ."
            )

            // 2) FromMaps ‚Äî ‚Äú–û–ø—Ü—ñ—è –ú–ü —Ç–∞ –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è (–ì–æ–ª–æ–≤–Ω–∞)‚Äù
            isFromMaps -> Triple(
                "–û–ø—Ü—ñ—è –ú–ü —Ç–∞ –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è (–ì–æ–ª–æ–≤–Ω–∞).",
                "–ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å $startTime –ø–æ $endTime. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É ¬´?¬ª –≤–≤–µ—Ä—Ö—É —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã.",
                "–ù–∞ –∫–∞—Ä—Ç–µ, —Å–∏–Ω–∏–º –º–∞—Ä–∫–µ—Ä–æ–º –æ—Ç–º–µ—á–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. " +
                        "–ó–µ–ª–µ–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –æ—Ç–º–µ—á–µ–Ω –∞–¥—Ä–µ—Å ‚Äî –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç. " +
                        "–ó–µ–ª—ë–Ω—ã–º–∏ (–∫—Ä–∞—Å–Ω—ã–º–∏) —Ç–æ—á–∫–∞–º–∏ –æ—Ç–º–µ—á–µ–Ω–æ –†–ï–ê–õ–¨–ù–û–ï –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. " +
                        "–¢–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –ª–∏–Ω–∏–µ–π, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–≤–∏–∂–µ–Ω–∏—è. " +
                        "–ó–µ–ª–µ–Ω—ã–µ —Ç–æ—á–∫–∏ ‚Äî –Ω–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–π (–Ω–∞—Ö–æ–¥–∏–ª—Å—è –ø–æ –∞–¥—Ä–µ—Å—É —Å —É—á—ë—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏), " +
                        "–∫—Ä–∞—Å–Ω—ã–µ ‚Äî –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∞–¥—Ä–µ—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç. " +
                        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ—Å—Ç—É, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä (–∏–ª–∏ —Ç–æ—á–∫—É)."
            )

            // 3) FromWPdata + –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî ‚Äú–ü–ª–∞–Ω –†–æ–±—ñ—Ç‚Äù
            else -> Triple(
                "–ü–ª–∞–Ω –†–æ–±—ñ—Ç.",
                "–ê–¥—Ä–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–∞–±–æ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å $periodStrt –ø–æ $periodEnd. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É ¬´?¬ª –≤–≤–µ—Ä—Ö—É —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã.",
                "–ù–∞ –∫–∞—Ä—Ç–µ –∑–µ–ª—ë–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ –ø–æ–º–µ—á–µ–Ω—ã –∞–¥—Ä–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç. " +
                        "–ß–∏—Å–ª–∞ –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É. " +
                        "–°–∏–Ω–∏–º –æ—Ç–º–µ—á–µ–Ω–æ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ú–ü). " +
                        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–∞—Ö –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥—Ä–µ—Å—É, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–∞—Ä–∫–µ—Ä–µ."
            )
        }
    }


    // Effects handling
    val effects = vm.effects
    val cameraController = rememberCameraPositionState()


    LaunchedEffect(vm, sessionId) {
        effects.collectLatest { e ->
            when (e) {
                is MapEffect.MoveCamera -> {
                    if (e.sessionId != sessionId) return@collectLatest  // üëà –∏–≥–Ω–æ—Ä —á—É–∂–∏—Ö
                    val latLngs = e.latLngs
                    try {
                        if (latLngs.size >= 2) {
                            val builder = LatLngBounds.builder()
                            latLngs.forEach { builder.include(it) }
                            cameraController.animate(
                                CameraUpdateFactory.newLatLngBounds(builder.build(), e.padding)
                            )
                        } else if (latLngs.size == 1) {
                            cameraController.animate(
                                CameraUpdateFactory.newLatLngZoom(latLngs.first(), e.zoomIfSingle ?: 14f)
                            )
                        }
                    } catch (_: Throwable) {
                    }
                }

                is MapEffect.OpenContextMenu -> onOpenContextMenu(e.wp, e.contextUI)
                is MapEffect.ShowConfirm -> {
// confirm dialog is drawn below from state; nothing to do here
                }
            }
        }
    }
    // –ü–æ–¥–∞—ë–º –≤—Ö–æ–¥ ‚Äî –Ω–æ –∑–∞–ø—Ä–µ—â–∞–µ–º –∞–≤—Ç–æ-—Ñ–∏—Ç –Ω–∞ SetInput
    LaunchedEffect(
        uiState.items,
        uiState.filters,
        uiState.sortingFields,
        mainViewModel.rangeDataStart.value,
        mainViewModel.rangeDataEnd.value,
        uiState.filters?.searchText,
        Globals.CoordX,
        Globals.CoordY,
        vm,
        sessionId
    ) {
        vm.process(
            MapIntent.SetInput(
                items = uiState.items,
                filters = uiState.filters,
                sorting = uiState.sortingFields,
                rangeStartLocalDate = mainViewModel.rangeDataStart.value,
                rangeEndLocalDate = mainViewModel.rangeDataEnd.value,
                search = uiState.filters?.searchText,
                userLat = Globals.CoordX,
                userLon = Globals.CoordY,
                autoCenterOnSetInput = false      // <-- –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞
            )
        )
    }

    androidx.compose.ui.window.Dialog(onDismissRequest = onDismiss) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .statusBarsPadding()
                .padding(vertical = 40.dp)
                .background(Color.Transparent)
        ) {
            Row(modifier = Modifier.align(Alignment.End)) {

                ImageButton(
                    id = R.drawable.ic_question_1,
                    shape = CircleShape,
                    colorImage = ColorFilter.tint(Color.Gray),
                    sizeButton = 40.dp,
                    sizeImage = 23.dp,
                    modifier = Modifier.padding(start = 15.dp, bottom = 10.dp),
                    onClick = { showToolTip = true }
                )

                ImageButton(
                    id = R.drawable.ic_settings_empt,
                    shape = CircleShape,
                    colorImage = ColorFilter.tint(Color.Gray),
                    sizeButton = 40.dp,
                    sizeImage = 25.dp,
                    modifier = Modifier.padding(start = 15.dp, bottom = 10.dp),
                    onClick = { showSettingsDialog = true }
                )
                ImageButton(
                    id = R.drawable.ic_letter_x,
                    shape = CircleShape,
                    colorImage = ColorFilter.tint(Color.Gray),
                    sizeButton = 40.dp,
                    sizeImage = 25.dp,
                    modifier = Modifier.padding(start = 15.dp, bottom = 10.dp),
                    onClick = onDismiss
                )
            }


            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .clip(RoundedCornerShape(8.dp))
                    .background(Color.White)
                    .padding(16.dp)
            ) {
                Column(Modifier.fillMaxWidth()) {
                    Text(text = "–ö–∞—Ä—Ç–∞", modifier = Modifier.align(Alignment.CenterHorizontally))
                    Spacer(Modifier.height(8.dp))
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .animateContentSize()
                    ) {
                        Text(
                            text = mapSubheaderText,
                            maxLines = maxLinesSubTitle,
                            overflow = TextOverflow.Ellipsis,
                            color = if ((mainViewModel.typeWindow ?: "").equals(
                                    "container",
                                    true
                                )
                            ) Color.DarkGray else Color.Black,
                            textDecoration = if (maxLinesSubTitle == 1) TextDecoration.Underline else null,
                            modifier = Modifier
                                .padding(start = 1.dp, bottom = 4.dp, end = 1.dp)
                                .clickable {
                                    maxLinesSubTitle = if (maxLinesSubTitle == 1) 99 else 1
                                }
                        )
                    }


//                    CollapsibleSubtitle(text = mapSubheaderText)
                    Spacer(Modifier.height(8.dp))


                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f)
                            .clip(RoundedCornerShape(8.dp))
                            .background(Color.White)
                    ) {
                        StoresMap(
                            cameraPositionState = cameraController,
                            vm = vm
                        )
                    }


                    Spacer(Modifier.height(8.dp))
                }
            }
        }
    }
    // Confirm Dialog (bound to VM state)
    val state by vm.state.collectAsState()
    if (state.pendingWp != null) {
        val wp = state.pendingWp
        val sortingFieldAdr = remember { SortingField("addr_txt", mainViewModel.getTranslateString("–ê–¥—Ä–µ—Å–∞", 1101), 1) }
        val sortingFieldDate = remember { SortingField("dt", mainViewModel.getTranslateString("–î–∞—Ç–∞", 1100), 1) }
        val periodDate = remember(uiState.filters?.rangeDataByKey) {
            uiState.filters?.rangeDataByKey?.let { range ->
                val start =
                    range.start?.format(formatterDDmmYYYY)
                        ?: "?"
                val end =
                    range.end?.format(formatterDDmmYYYY)
                        ?: "?"
                "$start –ø–æ $end"
            } ?: "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        }

        MessageDialog(
            title = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å–µ—â–µ–Ω–Ω—è–º",
            status = DialogStatus.NORMAL,
            subTitle = wp?.addr_txt,
            message = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç—ã –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å $periodDate?",
            onDismiss = { vm.process(MapIntent.DismissConfirm) },
            onConfirmAction = {

                scope.launch {
                    // 1) –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ MainViewModel
                    mainViewModel.updateSorting(sortingFieldAdr, 0)
                    mainViewModel.updateSorting(sortingFieldDate, 1)
                    // (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∫–∞–¥—Ä)
//                     yield() // kotlinx.coroutines.yield()

                    // 2) –ü–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É/—Å–∫—Ä–æ–ª–ª
                    vm.process(MapIntent.ConfirmJump)
                }
            },
            onCancelAction = { vm.process(MapIntent.DismissConfirm) }
        )
    }

    if (showSettingsDialog) {
        if (allUserIs14041)
            MapRadiusDialog(
                vm = vm,                          // —Ç–≤–æ–π BaseMapViewModel
                mainViewModel = mainViewModel,    // —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã/—Ü–≤–µ—Ç–∞, –∫–∞–∫ –≤ SettingsDialog
                onDismiss = { showSettingsDialog = false }
            )
        else
            MessageDialog(
                title = "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ",
                status = DialogStatus.ALERT,
                message = "–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                onDismiss = {
                    showSettingsDialog = false
                },
                onConfirmAction = {
                    showSettingsDialog = false
                }
            )

    }


    if (showToolTip) {

        // –î–∏–∞–ª–æ–≥ ¬´–î–æ–≤—ñ–¥–∫–∞¬ª: subTitle/Message ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ
        MessageDialog(
            title = "–î–æ–≤—ñ–¥–∫–∞",
            status = DialogStatus.NORMAL,
            subTitle = infoSubtitle,   // ‚Üê –∑–∞–≥–æ–ª–æ–≤–æ–∫-—Å–∞–±—Ç–∞–π—Ç–ª –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
            message = helpMessage,     // ‚Üê —Ç–µ–ª–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
            onDismiss = { showToolTip = false },
            okButtonName = "Ok",
            onConfirmAction = { showToolTip = false }
        )


    }


}