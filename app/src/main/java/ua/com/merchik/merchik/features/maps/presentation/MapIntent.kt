package ua.com.merchik.merchik.features.maps.presentation

import com.google.android.gms.maps.model.LatLng
import ua.com.merchik.merchik.data.RealmModels.WpDataDB
import ua.com.merchik.merchik.dataLayer.ContextUI
import ua.com.merchik.merchik.dataLayer.model.DataItemUI
import ua.com.merchik.merchik.features.main.Main.Filters
import ua.com.merchik.merchik.features.main.Main.SortingField
import ua.com.merchik.merchik.features.maps.domain.PointUi
import ua.com.merchik.merchik.features.maps.domain.StoreCenter
import java.time.LocalDate

sealed interface MapIntent {
    data class Init(val sessionId: Long) : MapIntent   // üëà –¥–æ–±–∞–≤–∏–ª–∏ id —Å–µ—Å—Å–∏–∏
    data class SetInput(
        val items: List<DataItemUI>,
        val filters: Filters?,
        val sorting: List<SortingField?>,
        val rangeStartLocalDate: LocalDate?, // –ø–æ–º–µ–Ω—è–ª–∏ —Ç–∏–ø –Ω–∞ LocalDate?
        val rangeEndLocalDate: LocalDate?,
        val search: String?,
        val userLat: Double?,
        val userLon: Double?,
        val autoCenterOnSetInput: Boolean = true
    ) : MapIntent

    data class MarkerClicked(val point: PointUi) : MapIntent
    data object ConfirmJump : MapIntent
    data object DismissConfirm : MapIntent
    data class SetCircleRadius(val meters: Double?) : MapIntent

}


sealed interface MapEffect {
    data class OpenContextMenu(val wp: WpDataDB, val contextUI: ContextUI) : MapEffect
    data class ShowConfirm(val wp: WpDataDB, val stableId: Long?) : MapEffect
    data class MoveCamera(
        val sessionId: Long,                  // üëà –¥–æ–±–∞–≤–∏–ª–∏
        val latLngs: List<LatLng>,
        val padding: Int,
        val zoomIfSingle: Float?
    ) : MapEffect
}

data class MapState(
    val isLoading: Boolean = false,
    val filtered: List<DataItemUI> = emptyList(),
    val center: StoreCenter? = null,
    val pointsUi: List<PointUi> = emptyList(),
    val userLat: Double? = null,
    val userLon: Double? = null,
    val pendingWp: WpDataDB? = null,
    val pendingStableId: Long? = null,
    val autoBaselineRadiusMeters: Double? = null, // –∞–≤—Ç–æ ¬´—Å–∞–º–∞—è –¥–∞–ª—å–Ω—è—è + 50–º¬ª
    val customRadiusMeters: Double? = null,       // –∏–∑ –º–µ–Ω—é; –º–æ–∂–µ—Ç –±—ã—Ç—å null (–Ω–µ—Ç —Å—É–∂–µ–Ω–∏—è)
    val circleRadiusMeters: Double? = null        // —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π (—Ä–∏—Å—É–µ–º –ø–æ –Ω–µ–º—É)
)


object MapReducer {
    fun reduce(state: MapState, intent: MapIntent): MapState = when (intent) {
        is MapIntent.Init -> state.copy(
            isLoading = true,
            // –ù–ò–ß–ï–ì–û –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω—è–µ–º ‚Äî sessionId —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–æ VM, –Ω–µ –≤ state
        )

        is MapIntent.SetInput -> state.copy(isLoading = true, userLat = intent.userLat, userLon = intent.userLon)
        is MapIntent.MarkerClicked -> state
        MapIntent.ConfirmJump -> state  // <-- –ù–ò–ß–ï–ì–û –ù–ï –î–ï–õ–ê–ï–ú!
        MapIntent.DismissConfirm -> state.copy(pendingWp = null, pendingStableId = null)
        is MapIntent.SetCircleRadius -> {
            val newCustom = intent.meters
            val eff = effectiveRadius(state.autoBaselineRadiusMeters, newCustom)
            state.copy(customRadiusMeters = newCustom, circleRadiusMeters = eff)
        }
    }
}


internal fun effectiveRadius(auto: Double?, custom: Double?): Double? =
    when {
        auto == null && custom == null -> null
        auto == null -> custom
        custom == null -> auto
        else -> minOf(auto, custom) // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞–µ—Ç
    }